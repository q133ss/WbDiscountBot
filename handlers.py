from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import requests
from db import get_user_key, save_user_key
from config import API_URL, PROFILE_URL

async def getChatId(update):
    if update.message:
        return update.message.chat.id
    elif update.callback_query:
        return update.callback_query.message.chat.id
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∏ callback_query, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        await update.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    chat_id = update.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
    if context.args:
        key = context.args[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π key
        save_user_key(chat_id, key)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º key –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏")
    else:
        await update.message.reply_text("–í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == 'profile':
        chat_id = query.message.chat.id
        key = get_user_key(chat_id)

        if key:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∫–ª—é—á–æ–º
            response = requests.get(API_URL + "/tg/user?key="+key)

            if response.status_code == 200:
                user_data = response.json().get("user", {})
                 # –î–æ—Å—Ç–∞—ë–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                balance = user_data.get('balance', 0)  # –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –±–∞–ª–∞–Ω—Å
                inn = user_data.get('inn', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                shop_name = user_data.get('shopName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                
                profile_info = (f"–ò–º—è: {name}\n"
                                f"–ò–ù–ù: {inn}\n"
                                f"–ú–∞–≥–∞–∑–∏–Ω: {shop_name}")

                keyboard = [
                    [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data='balance')],
                    [InlineKeyboardButton("–¢–æ–≤–∞—Ä—ã", callback_data='products')],
                    [InlineKeyboardButton("–û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data='ads')],
                    [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", url=f"{PROFILE_URL}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text=profile_info, reply_markup=reply_markup)
            else:
                print(response)
                await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.")
        else:
            await query.edit_message_text(text="–í–∞—à –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–±–∞–ª–∞–Ω—Å, —Ç–æ–≤–∞—Ä—ã, –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
async def balance(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å –≤—ã–∫—É–ø–æ–≤", callback_data='buyback_balance')],
        [InlineKeyboardButton("–†—É–±–ª—ë–≤—ã–π –±–∞–ª–∞–Ω—Å", callback_data='ruble_balance')],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='profile')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–ª–∞–Ω—Å–∞:", reply_markup=reply_markup)

async def buyback_balance(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat.id
    key = get_user_key(chat_id)

    if key:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∫–ª—é—á–æ–º
        response = requests.get(API_URL + "/tg/user?key="+key)

        if response.status_code == 200:
            user_data = response.json().get("user", {})
            payback = user_data.get('payback', 0)
            
            profile_info = (f"–ë–∞–ª–∞–Ω—Å –≤—ã–∫—É–ø–æ–≤: {payback}")

            keyboard = [
                [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='recharge')],
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='profile')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=profile_info, reply_markup=reply_markup)
        else:
            print(response)
            await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    else:
        await query.edit_message_text(text="–í–∞—à –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

async def ruble_balance(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat.id
    key = get_user_key(chat_id)

    if key:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∫–ª—é—á–æ–º
        response = requests.get(API_URL + "/tg/user?key="+key)

        if response.status_code == 200:
            user_data = response.json().get("user", {})
            balance = user_data.get('balance', 0)
            
            profile_info = (f"–ë–∞–ª–∞–Ω—Å —Ä—É–±–ª—ë–≤—ã–π: {balance}")

            keyboard = [
                [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='recharge')],
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='profile')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=profile_info, reply_markup=reply_markup)
        else:
            print(response)
            await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    else:
        await query.edit_message_text(text="–í–∞—à –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
def create_product_buttons(products):
    buttons = []
    for product in products:
        button_text = f"{product['title']} - {product['price']}‚ÇΩ"
        url = f"https://wbdiscount.pro/user/announcement/{product['id']}"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
        if product['status']:
            button = InlineKeyboardButton(text=f"‚úÖ {button_text}", url=url, callback_data=f"product_{product['id']}")
        else:
            button = InlineKeyboardButton(text=f"‚ùå {button_text}", url=url, callback_data=f"product_{product['id']}")
        buttons.append([button])
    return InlineKeyboardMarkup(buttons)

# –§—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def paginate(products, page=1, page_size=1000):
    start = (page - 1) * page_size
    end = page * page_size
    return products[start:end]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã products
async def products(update: Update, context: CallbackContext):
    chat_id = await getChatId(update)
    key = get_user_key(chat_id)

    if key:
        response = requests.get(f"{API_URL}/product/getAll?userId={key}")
        print(f"{API_URL}/product/getAll?userId={key}")

        if response.status_code == 200:
            data = response.json()
            products = data.get('productsWithUrls', [])
            page = int(context.args[0]) if context.args else 1

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            products_on_page = paginate(products, page)

            for product in products_on_page:
                title = product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                buybacks = product.get('buybacks', 0)
                purchases = product.get('purchases', 0)
                views = product.get('views', 0)
                conversation = product.get('conversation', 0)
                status = "–ê–∫—Ç–∏–≤–µ–Ω" if product.get('status') else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
                images = product.get('images', [])
                photo_url = images[0] if images else 'https://example.com/default_image.jpg'  # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    f"<b>{title}</b>\n"
                    f"üì¶ –í—ã–∫—É–ø—ã: {buybacks}\n"
                    f"üõí –ü–æ–∫—É–ø–∫–∏: {purchases}\n"
                    f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
                    f"üí¨ –û—Ç–∫–ª–∏–∫–∏: {conversation}\n"
                    f"üîò –°—Ç–∞—Ç—É—Å: {status}"
                )
                
                try:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo_url,
                        caption=message_text,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    print(f"Error sending photo: {e}")


            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = [
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='profile')]
            ]

            reply_markup = InlineKeyboardMarkup(navigation_buttons)
            await context.bot.send_message(chat_id=chat_id, text="–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º:", reply_markup=reply_markup)

        else:
            await update.callback_query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    else:
        await update.callback_query.edit_message_text("–í–∞—à –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


async def ads(update: Update, context: CallbackContext):
    chat_id = await getChatId(update)
    key = get_user_key(chat_id)

    if key:
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        response = requests.get(f"{API_URL}/tg/announcement/?userId={key}")
        print(f"{API_URL}/tg/announcement/?userId={key}")

        if response.status_code == 200:
            data = response.json()
            announcements = data.get('announcements', [])

            # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
            for ad in announcements:
                photo_url = ad['Product']['images'][0]['url']  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–≤–∞—Ä–∞
                title = ad['title']
                price = ad['price']
                cashback = ad['cashback']

                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    f"<b>{title}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                    f"üéÅ –ö–µ—à–±—ç–∫: {cashback} —Ä—É–±."
                )

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –∑–∞–∫–∞–∑–∞
                keyboard = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url=f"https://wbdiscount.pro/user/announcement/{ad['id']}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_url,
                    caption=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            return_button = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='profile')]]
            await context.bot.send_message(chat_id=chat_id, text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(return_button))
            
        else:
            await update.callback_query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    else:
        await update.callback_query.edit_message_text("–í–∞—à –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")